
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '9A2B4AA2AA4D266212B9325FAC962589'
    
_lr_action_items = {'SYMBOL':([3,6,7,11,16,19,20,21,24,25,26,27,28,29,30,31,32,38,51,52,59,],[5,15,5,5,15,5,35,5,15,15,15,15,15,15,15,15,15,54,5,35,54,]),'MINUS':([3,5,6,7,10,11,13,15,16,17,19,21,23,24,25,26,27,28,29,30,31,32,33,41,42,43,44,45,46,47,48,49,50,51,57,],[6,-18,6,6,-17,6,29,-18,6,-15,6,6,29,6,6,6,6,6,6,6,6,6,29,-16,-13,29,29,-11,-14,-12,29,29,29,6,29,]),'LEQT':([5,10,13,15,17,23,41,42,45,46,47,57,],[-18,-17,26,-18,-15,26,-16,-13,-11,-14,-12,26,]),'DO':([20,],[38,]),'FALSE':([3,7,11,19,21,51,],[12,12,12,12,12,12,]),'SEMI':([5,8,10,12,14,15,17,18,34,36,39,40,41,42,43,44,45,46,47,48,49,50,54,56,57,],[-18,-28,-17,-29,-31,-18,-15,-26,-24,52,-25,-27,-16,-13,-23,-20,-11,-14,-12,-19,-21,-22,59,-9,-10,]),'NOT':([3,7,11,19,21,51,],[7,7,7,7,7,7,]),'AND':([5,8,9,10,12,14,15,17,18,22,34,39,40,41,42,43,44,45,46,47,48,49,50,56,],[-30,-28,19,-17,-29,-31,-18,-15,-26,19,-24,-25,-27,-16,-13,-23,-20,-11,-14,-12,-19,-21,-22,19,]),'THEN':([5,8,9,10,12,14,15,17,18,34,39,40,41,42,43,44,45,46,47,48,49,50,],[-30,-28,20,-17,-29,-31,-18,-15,-26,-24,-25,-27,-16,-13,-23,-20,-11,-14,-12,-19,-21,-22,]),'DIVIDE':([5,10,13,15,17,23,33,41,42,43,44,45,46,47,48,49,50,57,],[-18,-17,28,-18,-15,28,28,-16,-13,28,28,28,-14,28,28,28,28,28,]),'ENDIF':([37,52,58,60,],[53,-8,-7,62,]),'IF':([0,2,53,62,],[3,3,-4,-3,]),'OR':([5,8,9,10,12,14,15,17,18,22,34,39,40,41,42,43,44,45,46,47,48,49,50,56,],[-30,-28,21,-17,-29,-31,-18,-15,-26,21,21,-25,-27,-16,-13,-23,-20,-11,-14,-12,-19,-21,-22,21,]),'RPAREN':([5,8,10,12,14,15,17,18,22,23,33,34,39,40,41,42,43,44,45,46,47,48,49,50,],[-18,-28,-17,-29,-31,-18,-15,-26,40,41,41,-24,-25,-27,-16,-13,-23,-20,-11,-14,-12,-19,-21,-22,]),'IS':([35,],[51,]),'MULT':([5,10,13,15,17,23,33,41,42,43,44,45,46,47,48,49,50,57,],[-18,-17,24,-18,-15,24,24,-16,-13,24,24,24,-14,24,24,24,24,24,]),'$end':([1,2,4,53,62,],[0,-2,-1,-4,-3,]),'LPAREN':([3,6,7,11,16,19,21,24,25,26,27,28,29,30,31,32,51,],[11,16,11,11,16,11,11,16,16,16,16,16,16,16,16,16,11,]),'NUMBER':([3,6,7,11,16,19,21,24,25,26,27,28,29,30,31,32,51,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'DONE':([55,59,61,],[60,-6,-5,]),'TRUE':([3,7,11,19,21,51,],[8,8,8,8,8,8,]),'EQ':([5,10,13,15,17,23,41,42,45,46,47,57,],[-18,-17,25,-18,-15,25,-16,-13,-11,-14,-12,25,]),'PLUS':([5,10,13,15,17,23,33,41,42,43,44,45,46,47,48,49,50,57,],[-18,-17,27,-18,-15,27,27,-16,-13,27,27,-11,-14,-12,27,27,27,27,]),'LT':([5,10,13,15,17,23,41,42,45,46,47,57,],[-18,-17,30,-18,-15,30,-16,-13,-11,-14,-12,30,]),'GT':([5,10,13,15,17,23,41,42,45,46,47,57,],[-18,-17,31,-18,-15,31,-16,-13,-11,-14,-12,31,]),'GEQT':([5,10,13,15,17,23,41,42,45,46,47,57,],[-18,-17,32,-18,-15,32,-16,-13,-11,-14,-12,32,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'numrel':([3,7,11,19,21,51,],[14,14,14,14,14,14,]),'inference':([20,52,],[36,36,]),'rules':([0,2,],[1,4,]),'boolexp':([3,7,11,19,21,51,],[9,18,22,34,39,56,]),'inferences':([20,52,],[37,58,]),'rule':([0,2,],[2,2,]),'actions':([38,59,],[55,61,]),'numexp':([3,6,7,11,16,19,21,24,25,26,27,28,29,30,31,32,51,],[13,17,13,23,33,13,13,42,43,44,45,46,47,48,49,50,57,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> rules","S'",1,None,None,None),
  ('rules -> rule rules','rules',2,'p_rules','script_parser.py',94),
  ('rules -> rule','rules',1,'p_rules','script_parser.py',95),
  ('rule -> IF boolexp THEN DO actions DONE ENDIF','rule',7,'p_rule_actions','script_parser.py',104),
  ('rule -> IF boolexp THEN inferences ENDIF','rule',5,'p_rule_inference','script_parser.py',109),
  ('actions -> SYMBOL SEMI actions','actions',3,'p_actions','script_parser.py',115),
  ('actions -> SYMBOL SEMI','actions',2,'p_actions','script_parser.py',116),
  ('inferences -> inference SEMI inferences','inferences',3,'p_inferences','script_parser.py',126),
  ('inferences -> inference SEMI','inferences',2,'p_inferences','script_parser.py',127),
  ('inference -> SYMBOL IS boolexp','inference',3,'p_inference','script_parser.py',137),
  ('inference -> SYMBOL IS numexp','inference',3,'p_inference','script_parser.py',138),
  ('numexp -> numexp PLUS numexp','numexp',3,'p_numexp_binop','script_parser.py',146),
  ('numexp -> numexp MINUS numexp','numexp',3,'p_numexp_binop','script_parser.py',147),
  ('numexp -> numexp MULT numexp','numexp',3,'p_numexp_binop','script_parser.py',148),
  ('numexp -> numexp DIVIDE numexp','numexp',3,'p_numexp_binop','script_parser.py',149),
  ('numexp -> MINUS numexp','numexp',2,'p_numexp_unop','script_parser.py',155),
  ('numexp -> LPAREN numexp RPAREN','numexp',3,'p_numexp_atom','script_parser.py',161),
  ('numexp -> NUMBER','numexp',1,'p_numexp_atom','script_parser.py',162),
  ('numexp -> SYMBOL','numexp',1,'p_numexp_atom','script_parser.py',163),
  ('numrel -> numexp LT numexp','numrel',3,'p_numrel','script_parser.py',173),
  ('numrel -> numexp LEQT numexp','numrel',3,'p_numrel','script_parser.py',174),
  ('numrel -> numexp GT numexp','numrel',3,'p_numrel','script_parser.py',175),
  ('numrel -> numexp GEQT numexp','numrel',3,'p_numrel','script_parser.py',176),
  ('numrel -> numexp EQ numexp','numrel',3,'p_numrel','script_parser.py',177),
  ('boolexp -> boolexp AND boolexp','boolexp',3,'p_boolexp_binop','script_parser.py',184),
  ('boolexp -> boolexp OR boolexp','boolexp',3,'p_boolexp_binop','script_parser.py',185),
  ('boolexp -> NOT boolexp','boolexp',2,'p_boolexp_unop','script_parser.py',191),
  ('boolexp -> LPAREN boolexp RPAREN','boolexp',3,'p_boolexp_atom','script_parser.py',197),
  ('boolexp -> TRUE','boolexp',1,'p_boolexp_atom','script_parser.py',198),
  ('boolexp -> FALSE','boolexp',1,'p_boolexp_atom','script_parser.py',199),
  ('boolexp -> SYMBOL','boolexp',1,'p_boolexp_atom','script_parser.py',200),
  ('boolexp -> numrel','boolexp',1,'p_boolexp_atom','script_parser.py',201),
]
